XMDS_USR=`echo "$BASH_SOURCE" | sed -e 's|/share/xmds/xmds.conf||'`
XMDS_SUPPORT="${HOME}/Library/XMDS"

# If DEVELOPER_DIR has been set, find the compiler from that path.
# This way we don't require that the Xcode command line tools have been installed.
if [ ! -z "$DEVELOPER_DIR" ]; then
    export PATH=${DEVELOPER_DIR}/usr/bin:${PATH}
    
    function agreed_to_license {
        xcrun -find cc < /dev/null 2>/dev/null >/dev/null
    }
    
    # Check that the license agreement has been agreed to
    if ! agreed_to_license; then
        # Ask user to agree
        xcrun -run echo -n
        
        # If the license still hasn't been agreed to, exit
        if ! agreed_to_license; then
            exit;
        fi
    fi
        
    
    export CC=`xcrun -find cc`
    export CXX=`xcrun -find c++`
    export OMPI_CXX=${CXX}
fi

export XMDS_USER_DATA="${HOME}/Library/XMDS/etc/xmds2"
export PATH=${XMDS_SUPPORT}/bin:${XMDS_USR}/bin:${PATH}
export HDF5_DIR=${XMDS_USR}
export OPAL_PREFIX=${XMDS_USR}
export DYLD_LIBRARY_PATH=${XMDS_USR}/lib:${DYLD_LIBRARY_PATH}

# To ensure that we don't build Python extensions for ppc on Snow Leopard or earlier
export ARCHFLAGS="-arch i386 -arch x86_64" 

APP_SIGNATURE=`md5 -q "$XMDS_USR/distfiles/xmds2-requirements.pybundle" "$XMDS_USR/distfiles/xmds2-svn.tar.bz2"`

if ( [ ! -e "${XMDS_SUPPORT}/xmds-postinst-stamp" ] || [ "${APP_SIGNATURE}" != "`cat "$XMDS_SUPPORT/xmds-postinst-stamp"`" ] ); then
    if [ -e "${XMDS_SUPPORT}/xmds-postinst-stamp" ]; then
        echo "Reinstalling XMDS as XMDS.app was updated"
    fi 
    PATH=$PATH "$XMDS_USR/share/xmds/xmds-postinst"
    echo -n "${APP_SIGNATURE}" > "$XMDS_SUPPORT/xmds-postinst-stamp"
fi

unset APP_SIGNATURE

if ( [ ! -e "${XMDS_SUPPORT}/xmds-support-path" ] || [ "${XMDS_USR}" != "`cat "${XMDS_SUPPORT}/xmds-support-path"`" ] ); then
    if [ -e "${XMDS_SUPPORT}/xmds-support-path" ]; then
        echo "Configuring XMDS2 (Application path has changed)..."
    else
        echo "Configuring XMDS2..."
    fi
    xmds2 --configure --include-path "${XMDS_USR}/include" --lib-path "${XMDS_USR}/lib"
    
    echo -n "${XMDS_USR}" > "${XMDS_SUPPORT}/xmds-support-path"
    
    clear;
fi


if [ ! -z "$XMDS_SHELL" ]; then

    # Set prompt
    export PS1="\[\033[01;32m\]\h:\[\033[01;34m\]\W\$ \[\033[00m\]"

    # Set terminal title
    echo -n -e "\033]0;XMDS2\007"
    # Make text bold
    echo -n -e "\033[1m"
    
    cat << EOF

         Y88b   d88P 888b     d888 8888888b.   .d8888b.      .d8888b.  
          Y88b d88P  8888b   d8888 888  "Y88b d88P  Y88b    d88P  Y88b 
           Y88o88P   88888b.d88888 888    888 Y88b.                888 
            Y888P    888Y88888P888 888    888  "Y888b.           .d88P 
            d888b    888 Y888P 888 888    888     "Y88b.     .od888P"  
           d88888b   888  Y8P  888 888    888       "888    d88P"      
          d88P Y88b  888   "   888 888  .d88P Y88b  d88P    888"       
         d88P   Y88b 888       888 8888888P"   "Y8888P"     888888888  
EOF
    
    # Return to normal font weight
    echo -n -e "\033[0m"

    cat << EOF
    
This is a shell with your PATH setup to work with XMDS. If you are new
to XMDS you probably want to have a look at the example scripts. They 
are located under

    $XMDS_SUPPORT/src/xmds2/examples

For more information please visit the project website:

    http://www.xmds.org

EOF
fi


